*workspaces.nvim*         a simple workspace manager

Author:  Nathan Craddock <https://nathancraddock.com>
Repo:    https://github.com/natecraddock/workspaces.nvim
License: MIT

==============================================================================
INTRODUCTION                                                      *workspaces*

workspaces.nvim provides a few simple commands for managing workspace
directories in neovim. A workspace is a name and a path, and opening a
workspace will set the current directory to the correct path.

* Register a workspace with `:Workspaces add`
* Open a registered workspace with `:Workspaces open [name]`
* Hooks may be registered to provide additional functionality
* A telescope extension `:Telescope workspaces` is provided for fuzzy finding
  over workspaces

Nothing runs automatically. The idea is that workspace creation is an
infrequent task, so there shouldn't be any need for automatic workspace
registration, or heuristics to determine if a directory is a workspace. A
command and telescope extension are provided to make it simple to open a
workspace, but what that means beyond changing directories is left up to you by
customizing the hooks.

==============================================================================
CONFIGURATION                                       *workspaces-configuration*

Call the setup function with a table as the argument to override the default
configuration. >

    require("workspaces.nvim").setup({
        -- path to a file to store workspaces data in
        -- on a unix system this would be ~/.local/share/nvim/workspaces
        path = vim.fn.stdpath("data") .. util.path.sep .. "workspaces",

        -- lists of hooks to run after specific actions
        -- hooks can be a lua function or a vim command (string)
        -- if only one hook is needed, the list may be omitted
        hooks = {
            add = {},
            remove = {},
            open_pre = {}, -- run before changing directory
            open = {},     -- run after changing directory
        },
    })
<

==============================================================================
USAGE                                                       *workspaces-usage*

:Workspaces [subcommand] [args]

subcommand is one of **add**, **remove**, **list**, or **open**. Autocomplete
of subcommands and workspace names is provided. *opening* a workspace means to
change the current directory to that workspace's path.

:Workspaces add [name] [path]                            *:Workspaces add*

If both name and path are omitted, the current working directory will be
registered as a workspace, with the last path segment as the name.

If only name is provided, one of two actions will follow. (1) if name looks
like a path, that path will be registered, (2) otherwise the current working
directory will be registered as a workspace, with the given name.

if both name and path are provided, the workspace with name and path will be
registered.

:Workspaces remove [name]                             *:Workspaces remove*

If name is omitted, the workspace registered in the current working
directory will be removed, if it exists.

If name is provided, the specified workspace will be removed.

:Workspaces list                                        *:Workspaces list*

Prints all workspaces.

:Workspaces open [name]                                 *:Workspaces open*

Opens the named workspace.

==============================================================================
API                                                           *workspaces-api*

local workspaces = require("workspaces")

workspaces.add(path: string, name: string)

workspaces.remove(name: string)

workspaces.list()

workspaces.open(name: string)

==============================================================================
TELESCOPE                                               *workspaces-telescope*

workspaces.nvim is bundled with a
[telescope](https://github.com/nvim-telescope/telescope.nvim) picker
extension. To enable, add the following to your config >

    telescope.load_extension("workspaces")
<
The picker will list all workspaces. `<cr>` will open the selected workspace,
running any registered hooks. To keep nvim in insert mode (for example, when
chaining multiple telescope pickers), add the following to your telescope
setup function. >

    require("telescope").setup({
      extensions = {
        workspaces = {
          -- keep insert mode after selection in the picker, default is false
          keep_insert = true,
        }
      }
    })
<

==============================================================================
EXAMPLES                                                 *workspaces-examples*

Remember that more than one hook is allowed, so these may be combined in
creative ways! Hooks may also be registered after adding and removing
workspaces, not only after opening a workspace.

Change directory to the workspace and run fzf. >

    require("workspaces").setup({
        hooks = {
            open = "FZF",
        }
    })
<
Open nvim-tree. >

    require("workspaces").setup({
        hooks = {
            open = "NvimTreeOpen",
        }
    })
<
Load any saved sessions using natecraddock/sessions.nvim >

    require("workspaces").setup({
        hooks = {
            open = function()
              require("sessions").load(nil, { silent = true })
            end,
        }
    })
<
Open nvim-tree and a telescope file picker. >

    require("workspaces").setup({
        hooks = {
            open = { "NvimTreeOpen", "Telescope find_files" },
        }
    })
<
vim:tw=78:ts=8:ft=help:norl:
